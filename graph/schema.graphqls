type Carrier {
    id: String
    store_id: String!
    name: String!
    state_delivery: Int!
    username: String!
    password: String!
    current_order_id: String
    message_token: String!
    phone: String!
}
type CarrierStats {
    orders: Int!
    ranking: Float!
}
type Location  {
	latitude:  String
	longitude: String
	address:   String
  name: String
}

type Store {
    id: ID!
    name: String!
    phone: String!
    location: Location
}
type OrderDetail {
    amount: Float
    price: Float
    description: String
}
type Experience {
    score: Int!
    date: String!
    description: String!
}
type Order {
    id: ID!
    state: Int!
    price: Float!
    date: String!
    reference: String!
    delivery_date: String!
    departure_date: String!
    client_phone: String!
    client_name: String!
    exit_location: Location
    arrival_location: Location
    detail: [OrderDetail]
    carrier: Carrier
    store: Store
    experience: Experience
}



input FilterOptions{
    limit:Int!
    public_id:String
    state:Int
    state1:Int
    state2:Int
    carrier_public_id:String
    search:String
}

input NewOrder {
	description: String!
    public_id:String!
    reference:String!
    price: Float!
    client_phone: String!
    client_name: String!
    exit_location: AddLocation
    arrival_location: AddLocation
}

input UpdateOrderInput {
    carrier_public_id:String
    state:Int
    score: Int
    score_description: String
}
input NewCarrier {
  store_id: String!
  name: String!
  username: String!
  password: String!
  message_token: String
  phone: String!
}
input UpdateCarrier {
  name: String
  state_delivery: Int
  state : Boolean
  username: String
  password: String
  message_token: String
  phone: String
}
input AddLocation {
  latitude:String
  longitude:String
  address:String
  reference:String
}

input NewStore {
    name: String!
    phone: String!
    location: AddLocation
}
type Query {
    carrier(id:String!): Carrier!
    carriers(limit:Int,search:String): [Carrier]!
    login(username:String!,password:String!): Carrier!
    getCarrierStats(carrier_public_id:String!): CarrierStats!
    stores(limit: Int, search:String): [Store]!
    orders(input:FilterOptions!): [Order]!
    order(public_id:String!): Order!
}
type Mutation {
    createCarrier(input: NewCarrier!): Carrier!
    updateCarrier(id: String!,input:UpdateCarrier): Carrier!
    createStore(input: NewStore!): Store!
    deleteStore(id: String!): Store!
    createOrder(input: NewOrder!): Order!
    updateOrder(public_id:String!,input: UpdateOrderInput!): Order!
}